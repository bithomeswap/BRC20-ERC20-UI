export interface AccountKey {
  // hex address
  address: string;
  id: number;
  private_key: string,
}

export interface ProposalKey {
  address: Buffer;
  key_id: number;
  sequence_number: number;
}

export interface Transaction {
  // Script is the UTF-8 encoded Cadence source code that defines the execution logic for this transaction.
  script: Buffer;
  // Arguments is a list of Cadence values passed into this transaction.
  // Each argument is encoded as JSON-CDC bytes.
  arguments: Array<Buffer>;
  // ReferenceBlockID is a reference to the block used to calculate the expiry of this transaction.
  //
  // A transaction is considered expired if it is submitted to Flow after refBlock + N, where N
  // is a constant defined by the network.
  //
  // For example, if a transaction references a block with height of X and the network limit is 10,
  // a block with height X+10 is the last block that is allowed to include this transaction.
  // 32 bytes
  reference_block_id: Buffer;

  // GasLimit is the maximum number of computational units that can be used to execute this transaction.
  gas_limit: number;

  // ProposalKey is the account key used to propose this transaction.
  //
  // A proposal key references a specific key on an account, along with an up-to-date
  // sequence number for that key. This sequence number is used to prevent replay attacks.
  //
  // You can find more information about sequence numbers here: https://docs.onflow.org/concepts/transaction-signing/#sequence-numbers
  proposal_key: ProposalKey;

  // 8 bytes address
  payer: Buffer;

  // Authorizers is a list of the accounts that are authorizing this transaction to
  // mutate to their on-chain account state.
  //
  // You can find more information about the authorizer role here: https://docs.onflow.org/concepts/transaction-signing/#signer-roles
  authorizers: Array<Buffer>;

  // PayloadSignatures is a list of signatures generated by the proposer and authorizer roles.
  //
  // A payload signature is generated over the inner portion of the transaction (TransactionDomainTag + payload).
  //
  // You can find more information about transaction signatures here: https://docs.onflow.org/concepts/transaction-signing/#anatomy-of-a-transaction
  payload_signatures: Array<TransactionSignature>;

  // EnvelopeSignatures is a list of signatures generated by the payer role.
  //
  // An envelope signature is generated over the outer portion of the transaction (TransactionDomainTag + payload + payloadSignatures).
  //
  // You can find more information about transaction signatures here: https://docs.onflow.org/concepts/transaction-signing/#anatomy-of-a-transaction
  envelope_signatures: Array<TransactionSignature>;
}

export interface TransactionSignature {
  address: Buffer;
  key_id: number;
  signature: Buffer;
}

export interface Signature {
  address: string;
  keyId: number;
  sig: string;
  signerIndex?: number;
}

export interface TxPayload {
  script: string;
  arguments: Buffer[];
  refBlock: string;
  gasLimit: number;
  proposalKey: {
    address: Buffer;
    key_id: number;
    sequence_number: number;
  };
  payer: string;
  authorizers: string[];
}

export interface TxEnvelope {
  script: string,
  arguments: Buffer[],
  refBlock: string,
  gasLimit: number,
  proposalKey: {
    address: Buffer;
    key_id: number;
    sequence_number: number;
  };
  payer: string,
  authorizers: string[],
  payload_signatures: Signature[]
}
